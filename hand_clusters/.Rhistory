if(a[M[L, dist]] < a[M[R - 2^(dist-1) + dist, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist-1) + dist, dist])
}
argmin(a, 1, 6)
argmin(a, 1, 2)
argmin(a, 1, 3)
argmin(a, 5, 8)
argmin(a, 2, 8)
argmin = function(a, L, R){
m = length(a)
n = ceiling(log2(length(a))) + 1
M = matrix(0, nrow=m, ncol=n)
for (i in 1:m){M[i,1] = i}
for (j in 2:n){
i = 1
while(i + 2^(j-1) - 1 <= m){
print(paste0("Evaluating position (", i, ", ", j, ")"))
print(paste0("Comparing A[", i, ", ", j-1, "] with A[", i+2^(j-2), ", ", j-1, "]" ))
if(a[M[i, j-1]] < a[M[i + 2^(j-2), j-1]]){
M[i, j] = M[i, j-1]
}
else{
M[i, j] = M[i + 2^(j-2), j-1]
}
i = i + 1
}
}
print(M)
dist = floor(log2(R-L+1))
print(paste0("Log distance between ", R, " and ", L, " is: ", dist))
print(paste0("Comparing intervals: M[", L, ", ", dist, "] and M[",R - 2^(dist) + dist, ", ", dist, "]"))
print(a)
if(a[M[L, dist]] < a[M[R - 2^(dist) + dist, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist) + dist, dist])
}
argmin(a, 2, 8)
argmin(a, 1, 8)
argmin(a, 1, 2)
argmin(a, 2, 3)
argmin(a, 1, 2)
argmin = function(a, L, R){
m = length(a)
n = ceiling(log2(length(a))) + 1
M = matrix(0, nrow=m, ncol=n)
for (i in 1:m){M[i,1] = i}
for (j in 2:n){
i = 1
while(i + 2^(j-1) - 1 <= m){
print(paste0("Evaluating position (", i, ", ", j, ")"))
print(paste0("Comparing A[", i, ", ", j-1, "] with A[", i+2^(j-2), ", ", j-1, "]" ))
if(a[M[i, j-1]] < a[M[i + 2^(j-2), j-1]]){
M[i, j] = M[i, j-1]
}
else{
M[i, j] = M[i + 2^(j-2), j-1]
}
i = i + 1
}
}
print(M)
dist = floor(log2(R-L+1))
print(paste0("Log distance between ", R, " and ", L, " is: ", dist))
print(paste0("Comparing intervals: M[", L, ", ", dist, "] and M[",R - 2^(dist) + dist-1, ", ", dist, "]"))
print(a)
if(a[M[L, dist]] < a[M[R - 2^(dist) + dist-1, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist) + dist-1, dist])
}
argmin(a, 1, 2)
argmin = function(a, L, R){
m = length(a)
n = ceiling(log2(length(a))) + 1
M = matrix(0, nrow=m, ncol=n)
for (i in 1:m){M[i,1] = i}
for (j in 2:n){
i = 1
while(i + 2^(j-1) - 1 <= m){
print(paste0("Evaluating position (", i, ", ", j, ")"))
print(paste0("Comparing A[", i, ", ", j-1, "] with A[", i+2^(j-2), ", ", j-1, "]" ))
if(a[M[i, j-1]] < a[M[i + 2^(j-2), j-1]]){
M[i, j] = M[i, j-1]
}
else{
M[i, j] = M[i + 2^(j-2), j-1]
}
i = i + 1
}
}
print(M)
dist = floor(log2(R-L+1))
print(paste0("Log distance between ", R, " and ", L, " is: ", dist))
print(paste0("Comparing intervals: M[", L, ", ", dist, "] and M[",R - 2^(dist) + dist, ", ", dist, "]"))
print(a)
if(a[M[L, dist]] < a[M[R - 2^(dist) + dist, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist) + dist, dist])
}
argmin(a, 1, 2)
argmin = function(a, L, R){
m = length(a)
n = ceiling(log2(length(a))) + 1
M = matrix(0, nrow=m, ncol=n)
for (i in 1:m){M[i,1] = i}
for (j in 2:n){
i = 1
while(i + 2^(j-1) - 1 <= m){
print(paste0("Evaluating position (", i, ", ", j, ")"))
print(paste0("Comparing A[", i, ", ", j-1, "] with A[", i+2^(j-2), ", ", j-1, "]" ))
if(a[M[i, j-1]] < a[M[i + 2^(j-2), j-1]]){
M[i, j] = M[i, j-1]
}
else{
M[i, j] = M[i + 2^(j-2), j-1]
}
i = i + 1
}
}
print(M)
dist = floor(log2(R-L+1))
print(paste0("Log distance between ", R, " and ", L, " is: ", dist))
print(paste0("Comparing intervals: M[", L, ", ", dist, "] and M[",R - 2^(dist) + 1, ", ", dist, "]"))
print(a)
if(a[M[L, dist]] < a[M[R - 2^(dist) + 1, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist) + 1, dist])
}
argmin(a, 1, 2)
argmin(a, 1, 5)
argmin(a, 4, 5)
argmin(a, 1, 5)
argmin(a, 4, 5)
argmin = function(a, L, R){
m = length(a)
n = ceiling(log2(length(a))) + 1
M = matrix(0, nrow=m, ncol=n)
for (i in 1:m){M[i,1] = i}
for (j in 2:n){
i = 1
while(i + 2^(j-1) - 1 <= m){
print(paste0("Evaluating position (", i, ", ", j, ")"))
print(paste0("Comparing A[", i, ", ", j-1, "] with A[", i+2^(j-2), ", ", j-1, "]" ))
if(a[M[i, j-1]] < a[M[i + 2^(j-2), j-1]]){
M[i, j] = M[i, j-1]
}
else{
M[i, j] = M[i + 2^(j-2), j-1]
}
i = i + 1
}
}
print(M)
dist = floor(log2(R-L+1))
print(paste0("Log distance between ", R, " and ", L, " is: ", dist))
print(paste0("Comparing intervals: M[", L, ", ", dist, "] and M[",R - 2^(dist-1) + 1, ", ", dist, "]"))
print(a)
if(a[M[L, dist]] < a[M[R - 2^(dist-1) + 1, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist-1) + 1, dist])
}
argmin(a, 4, 5)
argmin(a, 1, 5)
argmin = function(a, L, R){
m = length(a)
n = ceiling(log2(length(a))) + 1
M = matrix(0, nrow=m, ncol=n)
for (i in 1:m){M[i,1] = i}
for (j in 2:n){
i = 1
while(i + 2^(j-1) - 1 <= m){
print(paste0("Evaluating position (", i, ", ", j, ")"))
print(paste0("Comparing A[", i, ", ", j-1, "] with A[", i+2^(j-2), ", ", j-1, "]" ))
if(a[M[i, j-1]] < a[M[i + 2^(j-2), j-1]]){
M[i, j] = M[i, j-1]
}
else{
M[i, j] = M[i + 2^(j-2), j-1]
}
i = i + 1
}
}
print(M)
dist = floor(log2(R-L+1))
print(paste0("Log distance between ", R, " and ", L, " is: ", dist))
print(paste0("Comparing intervals: M[", L, ", ", dist, "] and M[",R - 2^(dist) + 1, ", ", dist, "]"))
print(a)
if(a[M[L, dist]] < a[M[R - 2^(dist) + 1, dist]]){
return(M[L, dist])
}
return(M[R - 2^(dist) + 1, dist])
}
argmin(a, 1, 5)
argmin(a, 1, 8)
argmin(a, 2, 8)
146.3 - 11.9^2
11.9 - qnorm(0.975) * sqrt(4.69/200)
11.9 + qnorm(0.975) * sqrt(4.69/200)
0.3/sqrt(4.69/200)
pnorm(1.959)
1-pnorm(1.959)
4.3 - 1.7
2.6 / 0.44
1.7 + 0.22 * 5.909091
4.3 - 0.22 * 5.909091
pnorm(3/5.91)
1- pnorm(3/5.91)
0 * 0.2 + 2 * 0.18 + 3 * 0.21 + 4 * 0.14 + 5 * 0.1 + 6 * 0.17
0^2 * 0.2 + 2^2 * 0.18 + 3^2 * 0.21 + 4^2 * 0.14 + 5^2 * 0.1 + 6^2 * 0.17
13.47 - 3.07^2
24/184
0.02 / sqrt(0.11*0.99 / 184)
0.02 / sqrt(0.11*0.99 / 184)
3/61
27/245
pnorm(0.0002 / sqrt(0.11*0.99 / 245))
frequentanti = c(1.3, 2.8, 1.3, 6.6, 2.3)
frequentanti = c(1.3, 2.8, 1.3, 6.6, 2.3)
nfrequentanti = c(1.0, 2.5, 9.9, 0.8, 3.4, 4.9)
boxplot(frequentanti)
boxplot(nfrequentanti)
par(mfrow=c(1,2))
boxplot(frequentanti)
boxplot(nfrequentanti)
mean(frequentanti)
mean(nfrequentanti)
var(frequentanti)
var(nfrequentanti)
sqrt(320)
(sqrt(320) - 8 ) / 8
(-sqrt(320) - 8 ) / 8
(2.33 * sqrt(888.04) / 8)^2
693 * 0.65 * 0.35
693 * 0.65
(425 - 450.45) / sqrt(157.6575)
(63 - 450.45) / sqrt(157.6575)
(463 - 450.45) / sqrt(157.6575)
(2.33 * sqrt(888.04) / 7)^2
0.8177 / 0.8389
23 + 16 + 20 + 18 + 23
0.517 * 60
0.45 * 171
0.482 * 226
0.604 * 543
31 + 77 + 109 + 328
(31 + 77) / 231
(109+328)/(226+543)
545 / (60+171+226+543)
0.1 / (0.545 * 0.455 * sqrt(1/231 + 1/769))
sqrt((0.399 * (1 - 0.399) / 12708) + (0.482 * (1-0.482)/ 8703))
0.482 - 0.399
1.96 * 0.0068
0.083 + 1.96 * 0.0068
0.083 - 1.96 * 0.0068
var(c(30,45,45))
dev(c(30,45,45))
dev(c(10,20,30))
var(c(10,20,30))
350 / 4
20 - 2.13 * sqrt(87.5)
20 + 2.13 * sqrt(87.5)
20/sqrt(87.5)
pbinom(3, 5, 1/3)
pbinom(0, 5, 1/3)
5/3
5 * 1/3 * 2/3
86.93 / 58.90
5+12+60+4*19
153/51
84/(16 + 18 +11 + 6)
(9 + 36 + 33 + 24)/(16 + 18 +11 + 6)
(9 + 20 + 6 + 19) / 50
sqrt(1.08)
(24 + 9 + 11 + 24) / 16 + 18 +11 + 6 - 1)
(24 + 9 + 11 + 24) / (16 + 18 +11 + 6 - 1)
(24 + 9 + 11 + 24) / (16 + 18 +11 + 6)
sqrt(1.36)
qnorm(0.8)
2 * (1.96 + 0.84)^2 * 1.5^2
(0.8 * 0.3) / (0.8*0.3 + 0.1*0.7)
26/70
247 / 1249
(26/70) / (247/1249)
sqrt(1/26 + 1/44 + 1/247 + 1/1002)
1.88 + 1.96 * 0.257
1.88 - 1.96 * 0.257
sp = 19 * (15) + 19 * 14.5 / 38
sp = (19 * (15) + 19 * 14.5) / 38
t = 8 / (sp * sqrt(1/19 + 1/19))
t = 8 / (sqrt(sp) * sqrt(1/19 + 1/19))
2468 - 80 * 10
2468 - 70 * 10
choose(52, 7)
library(ggplot2)
library(dplyr)
library(tidyverse)
runs = read.csv("logs.csv", header=T)
runs$hands = 1:nrow(runs)
df = runs %>% pivot_longer(
cols = -hands,
names_to = "Player",
values_to = "Stack")
ggplot(data=df, aes(x=hands, y=Stack, col=Player)) + geom_line() + theme_bw()
turn_distributions <- read.csv("~/Desktop/pokerbot/turn_distributions.csv", header=FALSE, row.names=1)
View(turn_distributions)
turn_distributions <- read.csv("~/Desktop/pokerbot/turn_distributions.csv", header=FALSE)
hist(turn_distributions["34-35-36-37-39-51"])
hist(turn_distributions["34-35-36-37-39-51",])
sum(is.numeric(turn_distributions))
as..numeric(turn_distributions))
as.numeric(turn_distributions))
as.numeric(turn_distributions)
sum(is.numeric(turn_distributions))
str(turn_distributions)
str(turn_distributions)
rownames(turn_distributions)
data = turn_distributions["7-8-22-25-30-38", ]
data
#data = turn_distributions["7-8-22-25-30-38", ]
as.numeric(data)
#data = turn_distributions["7-8-22-25-30-38", ]
hist(as.numeric(data))
library(ggplot2)
library(dplyr)
library(tidyverse)
runs = read.csv("logs.csv", header=T)
View(turn_distributions)
data = turn_distributions["2-3-4-5-6-8", ]
hist(as.numeric(data))
data = turn_distributions["2-3-4-5-6-8", ]
hist(as.numeric(data), bins=30)
data = turn_distributions["2-3-4-5-6-8", ]
hist(as.numeric(data), breaks=20)
data = turn_distributions["2-3-4-5-6-8", ]
hist(as.numeric(data), breaks=50, freq=F)
View(turn_distributions)
data = turn_distributions["2-3-4-5-11-48", ]
hist(as.numeric(data), breaks=50, freq=F)
data = turn_distributions["2-3-4-5-11-48", ]
hist(as.numeric(data), breaks=30, freq=F)
f = read.csv("features.csv", row.names=1, header=F)
print(max(f[,3], na.rm=T))
print(min(f[,3], na.rm=T))
print(max(f[,4], na.rm=T))
print(min(f[,4], na.rm=T))
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q4 = quantile(f[,4], na.rm=T, probs = seq(0, 1, by = 0.01))
q_3 = q3[3]
q_4 = q4[97]
f[,3] = ifelse(is.na(f[,3]) | f[,3] < q_3, q_3, f[,3])
hist(f[,3])
f[,4] = ifelse(is.na(f[,4]) | f[,4] > q_4, q_4, f[,4])
hist(f[,4])
f = scale(f)
write.csv(f, "data_flop.csv", row.names=TRUE)
hist(f[,3])
hist(f[,4])
f = read.csv("features.csv", row.names=1, header=F)
print(max(f[,3], na.rm=T))
print(min(f[,3], na.rm=T))
print(max(f[,4], na.rm=T))
print(min(f[,4], na.rm=T))
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q4 = quantile(f[,4], na.rm=T, probs = seq(0, 1, by = 0.01))
q4 = quantile(f[,4], na.rm=T, probs = seq(0, 1, by = 0.01))
q_3 = q3[3]
q_4 = q4[97]
f[,3] = ifelse(is.na(f[,3]) | f[,3] < q_3, q_3, f[,3])
f[,4] = ifelse(is.na(f[,4]) | f[,4] > q_4, q_4, f[,4])
library(dplyr)
View(f)
f = f %>% mutate(across(.cols = -c(V6, V7), .fns = scale))
f = read.csv("features.csv", row.names=1, header=F)
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q4 = quantile(f[,4], na.rm=T, probs = seq(0, 1, by = 0.01))
q_3 = q3[3]
q_3 = q3[3]
q_4 = q4[97]
f[,3] = ifelse(is.na(f[,3]) | f[,3] < q_3, q_3, f[,3])
hist(f[,3])
f[,4] = ifelse(is.na(f[,4]) | f[,4] > q_4, q_4, f[,4])
hist(f[,4])
library(dplyr)
library(dplyr)
f = f %>% mutate(across(.cols = -c(V6, V7), .fns = scale))
hist(f[,1])
mean(f[,1])
hist(f[,1])
hist(f[,2])
hist(f[,3])
hist(f[,4])
hist(f[,5])
hist(f[,6])
hist(f[,5])
hist(f[,5], probability=T)
n = 1e4
m = f[sample(nrow(f), n), ]
plot(m$V5, m$V1)
scatter(m$V5, m$V1)
plot(m$V5, m$V1)
n = 1e5
plot(m$V5, m$V1)
plot(m$V5, m$V6)
plot(m$V1, m$V2)
View(m)
plot(m$V2, m$V3)
plot(m$V2, m$V4)
plot(m$V2, m$V5)
plot(m$V2, m$V6)
plot(m$V2, m$V7)
plot(m$V3, m$V4)
plot(m$V3, m$V5)
plot(m$V3, m$V6)
plot(m$V3, m$V7)
plot(m$V4, m$V5)
plot(m$V4, m$V6)
plot(m$V4, m$V7)
plot(m$V5, m$V6)
plot(m$V5, m$V7)
n = 1e6
m = f[sample(nrow(f), n), ]
plot(m$V5, m$V7)
plot(m$V2, m$V3)
f = f[,!7]
f = read.csv("features.csv", row.names=1, header=F)
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q3 = quantile(f[,3], na.rm=T, probs = seq(0, 1, by = 0.01))
q4 = quantile(f[,4], na.rm=T, probs = seq(0, 1, by = 0.01))
q4 = quantile(f[,4], na.rm=T, probs = seq(0, 1, by = 0.01))
q_3 = q3[3]
q_4 = q4[97]
f[,3] = ifelse(is.na(f[,3]) | f[,3] < q_3, q_3, f[,3])
f[,4] = ifelse(is.na(f[,4]) | f[,4] > q_4, q_4, f[,4])
f = f %>% mutate(across(.cols = -c(V6, V7), .fns = scale))
n = 1e4
m = f[sample(nrow(f), n), ]
plot(m$V2, m$V3)
f = f %>% select(-V7)
hist(f[,1])
hist(f[,2])
hist(f[,3])
hist(f[,4])
hist(f[,5], probability=T)
f = format(f, digits=4)
write.csv(f, "data_flop.csv", row.names=TRUE)
f[, -1] <- lapply(f[, -1], function(x) format(x, scientific = FALSE, digits = 4))
f[, -1] <- lapply(f[, -1], function(x) format(x, scientific = FALSE, digits = 4))
write.table(df, "output.csv", sep = ",", row.names = TRUE, col.names = FALSE, quote = FALSE)
write.table(f, "data_flop.csv", sep = ",", row.names = TRUE, col.names = FALSE, quote = FALSE)
write.table(f, "data_flop.csv", sep = ",", row.names = TRUE, col.names = FALSE, quote = FALSE)
results = kmeans(f, centers=16, iter.max = 1e9)
res = prcomp(f)
res = prcomp(f)
res = prcomp(f, scale=F)
f = format(f, digits=4, scientific=FALSE)
f = format(f, digits=4, scientific=FALSE)
write.table(f, "data
write.table(f, "data
write.table(f, "data_flop.csv", sep = ",", row.names = TRUE, col.names = FALSE, quote = FALSE)
results = kmeans(f, centers=16, iter.max = 1e9)
res = prcomp(f, scale=F)
sum(!is.numeric(f))
non_numeric <- sapply(f, function(col) !is.numeric(col))
# Identify columns with non-numeric values
non_numeric_columns <- names(f)[non_numeric]
# Find rows with non-numeric values in these columns
non_numeric_rows <- lapply(non_numeric_columns, function(col) {
which(!sapply(f[[col]], is.numeric))
})
non_numeric_rows
f = read.csv("features.csv", row.names=1, header=F)
f = read.csv("data_flop.csv", row.names=1, header=F)
hist(f[,1])
hist(f[,2])
hist(f[,3])
hist(f[,4])
hist(f[,5], probability=T)
n = 1e4
m = f[sample(nrow(f), n), ]
plot(m$V2, m$V3)
results = kmeans(f, centers=16, iter.max = 1e9)
res = prcomp(f, scale=F)
r = as.data.frame(res$x)
rownames(r)
colnames(r)
ssample = 1e4
tosample = sample(nrow(f), n)
df = data.frame("Group"=as.factor(results$cluster)[tosample],
"PC1"=r$PC1[tosample], "PC2"=r$PC2[tosample])
ggplot(data=df, aes(x=PC1, y=PC2, color=Group)) + geom_point(size=0.2)
library(ggplot2)
ggplot(data=df, aes(x=PC1, y=PC2, color=Group)) + geom_point(size=0.2)
ssample = 1e5
tosample = sample(nrow(f), n)
df = data.frame("Group"=as.factor(results$cluster)[tosample],
"PC1"=r$PC1[tosample], "PC2"=r$PC2[tosample])
ggplot(data=df, aes(x=PC1, y=PC2, color=Group)) + geom_point(size=0.2)
ssample = 1e6
tosample = sample(nrow(f), n)
df = data.frame("Group"=as.factor(results$cluster)[tosample],
"PC1"=r$PC1[tosample], "PC2"=r$PC2[tosample])
ggplot(data=df, aes(x=PC1, y=PC2, color=Group)) + geom_point(size=0.2)
results = kmeans(f, centers=16, iter.max = 1e9, nstart=10)
